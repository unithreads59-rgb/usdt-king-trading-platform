{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/api/admin/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your_jwt_secret\";\n\n// Mock admin data for demonstration\nconst mockAdmins = [\n  {\n    id: 1,\n    username: \"admin\",\n    email: \"samadmehboob80@gmail.com\",\n    password_hash: \"$2b$10$8K1p/a0dclxMNW.bIXXgaOKgq/Y4Fq4FNu1Vb2PuFuZ.Qs5Qs5Qs5\" // Dan98990\n  }\n];\n\n// Mock system settings\nlet systemSettings = {\n  depositAddress: \"0xf80Aa9242BBc876443E9Aef9A4038b904f4aD1A2\",\n  withdrawalsPaused: false,\n  lastNotice: \"\"\n};\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { action, username, password, token, withdrawalId, depositId, notice, pauseWithdrawals, newDepositAddress } = body;\n\n    if (action === \"login\") {\n      if (!username || !password) {\n        return NextResponse.json({ error: \"Missing username or password\" }, { status: 400 });\n      }\n\n      const admin = mockAdmins.find(a => a.email === username || a.username === username);\n      if (!admin) {\n        return NextResponse.json({ error: \"Invalid credentials\" }, { status: 401 });\n      }\n\n      // For demo purposes, we'll use a simple password check\n      // In production, you should hash the password properly\n      const isValid = password === \"Dan98990\" || await bcrypt.compare(password, admin.password_hash);\n      if (!isValid) {\n        return NextResponse.json({ error: \"Invalid credentials\" }, { status: 401 });\n      }\n\n      const adminToken = jwt.sign({ adminId: admin.id }, JWT_SECRET, { expiresIn: \"7d\" });\n      \n      return NextResponse.json({\n        admin: { id: admin.id, username: admin.username, email: admin.email },\n        token: adminToken\n      }, { status: 200 });\n\n    } else if (action === \"approveWithdrawal\") {\n      if (!token || !withdrawalId) {\n        return NextResponse.json({ error: \"Missing token or withdrawalId\" }, { status: 400 });\n      }\n\n      // Verify admin token\n      try {\n        jwt.verify(token, JWT_SECRET);\n      } catch (err) {\n        return NextResponse.json({ error: \"Invalid token\" }, { status: 401 });\n      }\n\n      // Simulate withdrawal approval\n      return NextResponse.json({ \n        message: \"Withdrawal approved successfully\",\n        withdrawalId \n      }, { status: 200 });\n\n    } else if (action === \"cancelWithdrawal\") {\n      if (!token || !withdrawalId) {\n        return NextResponse.json({ error: \"Missing token or withdrawalId\" }, { status: 400 });\n      }\n\n      try {\n        jwt.verify(token, JWT_SECRET);\n      } catch (err) {\n        return NextResponse.json({ error: \"Invalid token\" }, { status: 401 });\n      }\n\n      return NextResponse.json({ \n        message: \"Withdrawal cancelled successfully\",\n        withdrawalId \n      }, { status: 200 });\n\n    } else if (action === \"approveDeposit\") {\n      if (!token || !depositId) {\n        return NextResponse.json({ error: \"Missing token or depositId\" }, { status: 400 });\n      }\n\n      try {\n        jwt.verify(token, JWT_SECRET);\n      } catch (err) {\n        return NextResponse.json({ error: \"Invalid token\" }, { status: 401 });\n      }\n\n      return NextResponse.json({ \n        message: \"Deposit approved successfully\",\n        depositId \n      }, { status: 200 });\n\n    } else if (action === \"cancelDeposit\") {\n      if (!token || !depositId) {\n        return NextResponse.json({ error: \"Missing token or depositId\" }, { status: 400 });\n      }\n\n      try {\n        jwt.verify(token, JWT_SECRET);\n      } catch (err) {\n        return NextResponse.json({ error: \"Invalid token\" }, { status: 401 });\n      }\n\n      return NextResponse.json({ \n        message: \"Deposit cancelled successfully\",\n        depositId \n      }, { status: 200 });\n\n    } else if (action === \"releaseNotice\") {\n      if (!token || !notice) {\n        return NextResponse.json({ error: \"Missing token or notice\" }, { status: 400 });\n      }\n\n      try {\n        jwt.verify(token, JWT_SECRET);\n      } catch (err) {\n        return NextResponse.json({ error: \"Invalid token\" }, { status: 401 });\n      }\n\n      systemSettings.lastNotice = notice;\n      return NextResponse.json({ \n        message: \"Notice released to all users successfully\",\n        notice \n      }, { status: 200 });\n\n    } else if (action === \"pauseWithdrawals\") {\n      if (!token || pauseWithdrawals === undefined) {\n        return NextResponse.json({ error: \"Missing token or pauseWithdrawals flag\" }, { status: 400 });\n      }\n\n      try {\n        jwt.verify(token, JWT_SECRET);\n      } catch (err) {\n        return NextResponse.json({ error: \"Invalid token\" }, { status: 401 });\n      }\n\n      systemSettings.withdrawalsPaused = pauseWithdrawals;\n      return NextResponse.json({ \n        message: `Withdrawals ${pauseWithdrawals ? \"paused\" : \"resumed\"} successfully`,\n        withdrawalsPaused: pauseWithdrawals \n      }, { status: 200 });\n\n    } else if (action === \"editDepositAddress\") {\n      if (!token || !newDepositAddress) {\n        return NextResponse.json({ error: \"Missing token or newDepositAddress\" }, { status: 400 });\n      }\n\n      try {\n        jwt.verify(token, JWT_SECRET);\n      } catch (err) {\n        return NextResponse.json({ error: \"Invalid token\" }, { status: 401 });\n      }\n\n      systemSettings.depositAddress = newDepositAddress;\n      return NextResponse.json({ \n        message: \"Deposit address updated successfully\",\n        depositAddress: newDepositAddress \n      }, { status: 200 });\n\n    } else if (action === \"getStats\") {\n      try {\n        jwt.verify(token, JWT_SECRET);\n      } catch (err) {\n        return NextResponse.json({ error: \"Invalid token\" }, { status: 401 });\n      }\n\n      return NextResponse.json({\n        stats: {\n          totalUsers: 1247,\n          totalDeposits: 45678.90,\n          totalWithdrawals: 23456.78,\n          pendingTransactions: 12\n        },\n        systemSettings\n      }, { status: 200 });\n\n    } else {\n      return NextResponse.json({ error: \"Invalid action\" }, { status: 400 });\n    }\n  } catch (error) {\n    console.error(\"Admin API error:\", error);\n    return NextResponse.json({ error: \"Internal server error\" }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}